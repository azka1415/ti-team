import type { GetServerSideProps } from "next";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import Navbar from "../components/navbar/Navbar";
import Note from "../components/note/Note";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { useEffect, useMemo, useState } from "react";
import AddNote from "../components/note/AddNote";
import type { Note as NoteModel } from "@prisma/client";
import { Transition } from "@headlessui/react";
import { AddIcon, SearchIcon } from "@chakra-ui/icons";

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerAuthSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};

const Home: NextPage = () => {
  const { data: session } = useSession();
  const items = trpc.note.getItems.useQuery();
  const [openModal, setOpenModal] = useState(false);
  const [notes, setNotes] = useState<NoteModel[]>([]);
  const [showItems, setShowItems] = useState(false);
  const [sort, setSort] = useState("desc" as "desc" | "asc");
  const [query, setQuery] = useState("");
  const [found, setFound] = useState(true);

  const filteredNotes = useMemo(() => {
    if (query === "") {
      return notes;
    }

    const filter = notes.filter((note) => {
      return note.name.toLowerCase().includes(query.toLowerCase());
    });

    if (filter.length === 0) {
      setFound(false);
      return notes;
    }

    setFound(true);
    return filter;
  }, [notes, query]);

  useEffect(() => {
    if (items.data?.length === 0) {
      return;
    }
    if (items.data) {
      setShowItems(false);
      setNotes(items.data);
      setShowItems(true);
    }
    if (query === "") {
      setFound(true);
    }
    if (!found) {
      setShowItems(false);
    }
  }, [items.data, query, found]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <div className="flex h-auto w-full flex-col">
        <div className="flex h-min w-full items-center justify-between p-2">
          <div className="flex items-center justify-start">
            <h1 className="text-4xl font-bold">Notes</h1>
          </div>
          <div className="flex items-center justify-end">
            <button
              className="flex items-center gap-2 rounded-lg bg-purple-400 p-2 text-sm transition-all hover:bg-purple-500"
              onClick={() => setOpenModal(true)}
            >
              Add Note <AddIcon />{" "}
            </button>
          </div>
        </div>
        <div className="flex w-full flex-col items-center justify-center">
          <div className="flex items-center justify-center divide-x-2 rounded-lg bg-gray-200 pr-2">
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              id="search"
              className="rounded-lg bg-gray-200 p-2 text-sm outline-none transition-all"
            />
            <SearchIcon />
          </div>
          <div className="flex items-center justify-center p-2">
            <Transition
              show={!found}
              enter="transition ease-out duration-300"
              enterFrom="transform translate-y-4"
              enterTo="transform translate-y-0"
              leave="transition ease-in duration-200"
              leaveFrom="transform translate-y-0"
              leaveTo="transform translate-y-4"
            >
              {!found && <p>No Notes Found</p>}
            </Transition>
          </div>
        </div>
        <AddNote
          openModal={openModal}
          refetch={items.refetch}
          session={session}
          setOpenModal={setOpenModal}
        />
        {items.isLoading && <div className="p-2">Loading...</div>}
        {items.data?.length === 0 && <div className="p-2">No notes found</div>}
        <Transition
          as="div"
          appear={true}
          show={showItems}
          enter="transition ease-out duration-300"
          enterFrom="transform opacity-0 scale-95"
          enterTo="transform opacity-100 scale-100"
          leave="transition ease-in duration-200"
          leaveFrom="transform opacity-100 scale-100"
          leaveTo="transform opacity-0 scale-95"
          className="flex flex-col items-center justify-center space-y-4 p-2 transition-all md:grid md:grid-cols-3 md:gap-4 md:space-y-0 lg:grid-cols-5"
        >
          {filteredNotes
            .sort((a, b) => {
              if (sort === "desc") {
                const one = new Date(b.updatedAt).getTime();
                const two = new Date(a.updatedAt).getTime();
                return one - two;
              } else {
                const one = new Date(a.updatedAt).getTime();
                const two = new Date(b.updatedAt).getTime();
                return one - two;
              }
            })
            .map((item) => (
              <Transition.Child
                key={item.id}
                appear={true}
                enter="transition ease-out duration-300"
                enterFrom="transform scale-100 -translate-x-8"
                enterTo="transform scale-100 -translate-x-0"
                leave="transform duration-200 transition ease-in-out"
                leaveFrom="opacity-100 rotate-0 scale-100"
                leaveTo="opacity-0 scale-75 transform -translate-x-[4rem]"
              >
                <Note
                  item={item}
                  refetch={items.refetch}
                  setNotes={setNotes}
                  notes={notes}
                />
              </Transition.Child>
            ))}
        </Transition>
      </div>
    </>
  );
};

export default Home;
